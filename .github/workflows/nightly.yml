name: Nightly

on:
  schedule:
  - cron: '0 8 * * *'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_FRONTEND: midterm/frontend
  ECR_REPOSITORY_BACKEND: midterm/backend

permissions:
  contents: read

jobs:
  verification:
    name: Verification through temp EC2
    runs-on: ubuntu-latest
    environment: Test-deployment
    steps:
    - name: Configure AWS CLI 2
      run: |
        cd ~
        mkdir .aws
        cd .aws
        cat > ./credentials<< EOF
        [default]
        aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}
        EOF
        cat > ./config<< EOF
        [default]
        region=${{ env.AWS_REGION }}
        output=json
        EOF

    - name: Create temporary EC2
      id: ec2
      run: |
        echo "instance_id=$(aws ec2 run-instances --image-id ami-04b4f1a9cf54c11d0 --count 1 --instance-type t2.micro --key-name midterm-test --security-group-ids sg-02305a6071e4178cf --subnet-id subnet-08dda4cbe1450c84c --query 'Instances[0].InstanceId' --output text)" >> "$GITHUB_OUTPUT"
        echo "public_dns=$(aws ec2 describe-instances --query 'Instances[0].PublicDnsName' --output text)" >> "$GITHUB_OUTPUT"
        echo ${{ steps.ec2.outputs.public_dns }}
        
    - name: Set up project in EC2
      run: ssh -o StrictHostKeyChecking=no ubuntu@${{ steps.ec2.outputs.public_dns }} ls

    - name: Terminate temporary EC2
      run: aws ec2 terminate-instances --instance-ids ${{ steps.ec2.outputs.instance_id }}
        

  ecr-deploy:
    name: Deploy to AWS ECR
    runs-on: ubuntu-latest
    needs: verification
    environment: Test-deployment

    steps:
    - name: Checkout src
      uses: actions/checkout@v4
      with:
        repository: PaulMares/crud-react-node-mySQL-go
        path: ./app

    - name: Checkout infra
      uses: actions/checkout@v4
      with:
        path: ./infra

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG_F: ${{ github.sha }}
        IMAGE_TAG_B: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker compose -f ./infra/docker-compose.yml build
        docker images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG_F
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG_B
