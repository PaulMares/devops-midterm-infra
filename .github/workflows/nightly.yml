name: Nightly

on:
  schedule:
  - cron: '0 8 * * *'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_FRONTEND: midterm/frontend
  ECR_REPOSITORY_BACKEND: midterm/backend
  IMAGE_TAG_F: ${{ github.sha }}
  IMAGE_TAG_B: ${{ github.sha }}

permissions:
  contents: read

jobs:
  verification:
    name: Verification through temp EC2
    runs-on: ubuntu-latest
    environment: Test-deployment
    env:
      TMP_NAME: ${{ github.run_id }}
    steps:
    - name: Configure AWS CLI 2
      run: |
        cd ~
        mkdir .aws
        cd .aws
        cat > ./credentials<< EOF
        [default]
        aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}
        EOF
        cat > ./config<< EOF
        [default]
        region=${{ env.AWS_REGION }}
        output=json
        EOF

    - name: Create temporary EC2
      id: ec2
      run: |
        aws ec2 run-instances --image-id ami-04b4f1a9cf54c11d0 --count 1 --instance-type t2.micro --key-name vockey --security-group-ids sg-02305a6071e4178cf --subnet-id subnet-08dda4cbe1450c84c --associate-public-ip-address --tag-specifications 'ResourceType=instance,Tags=[{Key=hash,Value=${{ env.TMP_NAME }}}]'
        echo "instance_id=$(aws ec2 describe-instances --filters Name=tag:hash,Values=${{ env.TMP_NAME }} --query 'Reservations[0].Instances[0].InstanceId' --output text)" >> "$GITHUB_OUTPUT"

    - name: Get EC2 DNS
      id: ec2_wait
      run: |
        aws ec2 wait instance-status-ok --instance-ids ${{ steps.ec2.outputs.instance_id }}
        echo "public_dns=$(aws ec2 describe-instances --filters Name=tag:hash,Values=${{ env.TMP_NAME }} --query 'Reservations[0].Instances[0].PublicDnsName' --output text)" >> "$GITHUB_OUTPUT"

    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_KEY }}
        name: aws
        known_hosts: unnecessary

    - name: Set up key file
      run: |
        echo "${{ secrets.SSH_KEY }}" > ~/key.pem
        chmod 600 ~/key.pem
    
    - name: Set up project in EC2
      run: |
        ssh -i ~/key.pem -o StrictHostKeyChecking=no ubuntu@${{ steps.ec2_wait.outputs.public_dns }} "
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
          export NVM_DIR='$HOME/.nvm'
          [ -s '$NVM_DIR/nvm.sh' ] && \. '$NVM_DIR/nvm.sh'  # This loads nvm
          [ -s '$NVM_DIR/bash_completion' ] && \. '$NVM_DIR/bash_completion'  # This loads nvm bash_completion
          nvm install node
          mkdir midterm
          cd midterm
          sudo apt-get update
          sudo apt-get install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo 'deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable' | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          git clone https://github.com/PaulMares/crud-react-node-mySQL-go.git
          cd crud-react-node-mySQL-go
          cp .env.example .env
          echo '
          SSL_CERT=\'${{ secrets.SSL_CERT }}\'' >> .env
          echo SSL_KEY=\''${{ secrets.SSL_KEY }}'\' >> .env
          cat .env
          pwd
          sudo docker compose up --build --wait
          sleep 10s
          curl -k localhost:443"

    - name: Terminate temporary EC2
      if: ${{ steps.ec2.conclusion }} == success
      run: aws ec2 terminate-instances --instance-ids ${{ steps.ec2.outputs.instance_id }}

  ecr-deploy:
    name: Deploy to AWS ECR
    runs-on: ubuntu-latest
    needs: verification
    environment: Test-deployment

    steps:
    - name: Checkout src
      uses: actions/checkout@v4
      with:
        repository: PaulMares/crud-react-node-mySQL-go
        path: ./app

    - name: Checkout infra
      uses: actions/checkout@v4
      with:
        path: ./infra

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker compose -f ./infra/docker-compose.yml build
        docker images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG_F
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG_B

  qa-deploy:
    name: Deploy to AWS QA EC2
    runs-on: ubuntu-latest
    needs: ecr-deploy
    environment: Test-deployment

    steps:
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_KEY }}
        name: aws
        known_hosts: unnecessary

    - name: Set up key file
      run: |
        echo "${{ secrets.SSH_KEY }}" > ~/key.pem
        chmod 600 ~/key.pem

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Get QA EC2 info
      id: qa_info
      run: |
        echo "public_dns=$(aws ec2 describe-instances --filters Name=tag:Name,Values=QA-midterm --query 'Reservations[0].Instances[0].PublicDnsName' --output text)" >> "$GITHUB_OUTPUT"
    
    - name: Pull into QA EC2
      run: |
        ssh -i ~/key.pem -o StrictHostKeyChecking=no ubuntu@${{ steps.qa_info.outputs.public_dns }} "
          nvm install node
          sudo apt-get update
          sudo apt-get install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo 'deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo '${UBUNTU_CODENAME:-$VERSION_CODENAME}') stable' | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin unzip
          curl 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip' -o 'awscliv2.zip'
          unzip awscliv2.zip
          sudo ./aws/install || true
          mkdir ~/.aws || true
          echo '[default]
          aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}' > ~/.aws/credentials
          echo '[default]
          region=${{ env.AWS_REGION }}
          output=json
          aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}' > ~/.aws/config
          echo 'ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_FRONTEND=${{ env.ECR_REPOSITORY_FRONTEND }}
          ECR_REPOSITORY_BACKEND=${{ env.ECR_REPOSITORY_BACKEND }}
          IMAGE_TAG_F=${{ env.IMAGE_TAG_F }}
          IMAGE_TAG_B=${{ env.IMAGE_TAG_B }}
          DB_HOST=books-db.ctmrtiesjyzs.us-east-1.rds.amazonaws.com
          DB_PORT=3306
          DB_USER=root
          DB_PASS=${{ secrets.DB_PASS }}
          DB_NAME=test
          BACKEND_HOST=backend
          BACKEND_PORT=8800
          FRONTEND_HOST=frontend
          FRONTEND_PORT=443
          VITE_BACKEND_HOST=backend
          VITE_BACKEND_PORT=8800' > .env
          echo SSL_CERT=\''${{ secrets.SSL_CERT }}'\' >> .env
          echo SSL_KEY=\''${{ secrets.SSL_KEY }}'\' >> .env
          aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
          sudo docker stop build-frontend-1 || true
          sudo docker stop build-backend-1 || true
          sudo docker system prune -f
          curl -o docker-compose.yml https://raw.githubusercontent.com/PaulMares/devops-midterm-infra/refs/heads/main/docker-compose.yml
          sudo docker compose up --pull always --wait"
